"""first revision

迁移 ID: 989ba29d3182
父迁移:
创建时间: 2025-01-17 23:02:31.896385

"""

from __future__ import annotations

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

revision: str = "989ba29d3182"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = ("marisa",)
depends_on: str | Sequence[str] | None = None


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "sect",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("owner", sa.String(), nullable=False),
        sa.Column("scale", sa.Integer(), nullable=True),
        sa.Column("stone_amount", sa.Integer(), nullable=False),
        sa.Column("fairyland", sa.Integer(), nullable=True),
        sa.Column("materials", sa.Integer(), nullable=False),
        sa.Column("main_buff", sa.String(), nullable=True),
        sa.Column("sec_buff", sa.String(), nullable=True),
        sa.Column("elixir_room_level", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sect")),
        info={"bind_key": "marisa"},
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_name", sa.String(length=15), nullable=False),
        sa.Column("user_title", sa.String(), nullable=True),
        sa.Column("root", sa.String(), nullable=False),
        sa.Column("root_type", sa.String(), nullable=False),
        sa.Column("level", sa.String(), nullable=False),
        sa.Column("stone", sa.Integer(), nullable=False),
        sa.Column("exp", sa.Integer(), nullable=False),
        sa.Column("create_time", sa.DateTime(), nullable=False),
        sa.Column("last_check_time", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
        sa.UniqueConstraint("user_name"),
        info={"bind_key": "marisa"},
    )
    op.create_table(
        "backpack",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("item_name", sa.String(), nullable=False),
        sa.Column("item_type", sa.String(), nullable=False),
        sa.Column("item_amount", sa.Integer(), nullable=False),
        sa.Column("bundle_item_amount", sa.Integer(), nullable=False),
        sa.Column("create_time", sa.DateTime(), nullable=False),
        sa.Column("update_time", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_backpack_user_id_user"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_backpack")),
        info={"bind_key": "marisa"},
    )
    op.create_table(
        "buff",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("hp", sa.Integer(), nullable=False),
        sa.Column("mp", sa.Integer(), nullable=False),
        sa.Column("atk", sa.Integer(), nullable=False),
        sa.Column("vit", sa.Integer(), nullable=False),
        sa.Column("atk_level", sa.Integer(), nullable=False),
        sa.Column("atk_buff", sa.Integer(), nullable=False),
        sa.Column("main_buff", sa.Integer(), nullable=False),
        sa.Column("sec_buff", sa.Integer(), nullable=False),
        sa.Column("sub_buff", sa.Integer(), nullable=False),
        sa.Column("dharma", sa.Integer(), nullable=False),
        sa.Column("armor", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_buff_user_id_user"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_buff")),
        info={"bind_key": "marisa"},
    )
    op.create_table(
        "user_sect",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("sect_id", sa.Integer(), nullable=True),
        sa.Column("position", sa.String(), nullable=True),
        sa.Column("task", sa.Integer(), nullable=False),
        sa.Column("contribution", sa.Integer(), nullable=False),
        sa.Column("elixir_get", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["sect_id"], ["sect.id"], name=op.f("fk_user_sect_sect_id_sect")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_user_sect_user_id_user"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_sect")),
        info={"bind_key": "marisa"},
    )
    op.create_table(
        "user_status",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "NONE",
                "MEDITATING",
                "WORKING",
                "EXPLORING",
                "PRACTICING",
                name="userstatustype",
            ),
            nullable=False,
        ),
        sa.Column("create_time", sa.DateTime(), nullable=False),
        sa.Column("scheduled_time", sa.Integer(), nullable=True),
        sa.Column("is_sign", sa.Boolean(), nullable=False),
        sa.Column("is_beg", sa.Boolean(), nullable=False),
        sa.Column("is_ban", sa.Boolean(), nullable=False),
        sa.Column("level_up_cd", sa.DateTime(), nullable=True),
        sa.Column("level_up_rate", sa.Integer(), nullable=True),
        sa.Column("work_refresh_times", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_user_status_user_id_user"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_status")),
        info={"bind_key": "marisa"},
    )
    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_status")
    op.drop_table("user_sect")
    op.drop_table("buff")
    op.drop_table("backpack")
    op.drop_table("user")
    op.drop_table("sect")
    # ### end Alembic commands ###
